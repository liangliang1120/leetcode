# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.valToIndex = {}
        
    def constructFromPrePost(self, preorder: List[int], postorder: List[int]) -> Optional[TreeNode]:
        for i in range(len(postorder)):
            self.valToIndex[postorder[i]] = i
            
        return self.build(preorder, 0, len(preorder) - 1,
                    postorder, 0 ,len(postorder) - 1)
    
    def build(self, preorder, preStart, preEnd,
                    postorder, postStart ,postEnd):
        if preStart > preEnd:
            return None
        if preStart == preEnd:
            return TreeNode(preorder[preStart])
        
        rootVal = preorder[preStart]
        leftRootVal = preorder[preStart + 1]
        index = self.valToIndex[leftRootVal]
        leftSize = index - postStart + 1
        
        root = TreeNode(rootVal)
        root.left = self.build(preorder, preStart + 1, preStart + leftSize,
                    postorder, postStart, index)
        root.right = self.build(preorder, preStart + 1 + leftSize, preEnd,
                    postorder, index + 1, postEnd - 1)
        return root
        
