#383
#class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        magazinelist = list(magazine)
        ransomNotelist = list(ransomNote)
        for r in ransomNotelist:
            if r not in magazinelist:
                return False
            else:
                magazinelist.remove(r)
        return True

#1950
class Solution:
    def findMaximums(self, nums: List[int]) -> List[int]:
#         n = len(nums)
#         res = []
#         for i in range(1, n + 1):
#             temp_min = []
#             for x in range(n - i + 1):
#                 temp_list = nums[x: x + i]
#                 min_sublist = min(temp_list)
#                 temp_min.append(min_sublist)
#             res.append(max(temp_min))
#         return res


# class Solution:
#     def findMaximums(self, nums: List[int]) -> List[int]:
        s, left, right, result = [], [-1] * ((n := len(nums)) + 1), [n] * (n + 1), [0] * (n + 1)
        for i in range(n):
            while s and nums[s[-1]] >= nums[i]:
                s.pop()
            if s:
                left[i] = s[-1]
            s.append(i)
        s = []
        for i in range(n - 1, -1, -1):
            while s and nums[s[-1]] >= nums[i]:
                s.pop()
            if s:
                right[i] = s[-1]
            s.append(i)
        for i in range(n):
            result[l] = max(result[(l := right[i] - left[i] - 1)], nums[i])
        for i in range(n - 1, 0, -1):
            result[i] = max(result[i], result[i + 1])
        return result[1:]
         
