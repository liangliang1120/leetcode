# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def closestValue(self, root: Optional[TreeNode], target: float) -> int:
        # preorder
        self.res = [float('inf'), root]
        def dfs(root, target):
            if root is None:
                return 

            if abs(root.val - target) < self.res[0]:
                self.res = [abs(root.val - target), root.val]

            if target > root.val:
                dfs(root.right, target)
            else:
                dfs(root.left, target)
        dfs(root, target)
        return self.res[1]
        
    # recursion
    #     if root is None:
    #         return None

    #     lower = self.get_lower_bound(root, target)
    #     upper = self.get_upper_bound(root, target)

    #     if lower is None:
    #         return upper.val
    #     if upper is None:
    #         return lower.val
    #     if target - lower.val < upper.val - target:
    #         return lower.val
    #     else:
    #         return upper.val
    
    # def get_lower_bound(self, root, target):
    #     if root is None:
    #         return None
    #     if target < root.val:
    #         return self.get_lower_bound(root.left, target)
    #     lower = self.get_lower_bound(root.right, target)
    #     return root if lower is None else lower

    # def get_upper_bound(self, root, target):
    #     if root is None:
    #         return None
    #     if target > root.val:
    #         return self.get_upper_bound(root.right, target)
    #     upper = self.get_upper_bound(root.left, target)
    #     return root if upper is None else upper






