class Solution:
    def validTree(self, n: int, edges: List[List[int]]) -> bool:
        if n == 0:
            return True
        if n != len(edges) + 1:
            return False
        
        # 建图
        graph = collections.defaultdict(list)
        for u,v in edges:
            graph[u].append(v)
            graph[v].append(u)
        print(graph)
        visited = set() # 与二叉树的BFS相比多加了一行visited
        self._bfs(graph, visited)
        print(visited)
        print(111)
        return len(visited) == n # 每个节点都被访问过且都被访问过一次

    def _bfs(self, graph, visited):
        q = collections.deque([0])
        # q.append(0)
        visited.add(0)
        while q:
            cur = q.popleft()
            for node in graph[cur]:
                if node not in visited:
                    q.append(node)
                    visited.add(node)
