# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
import collections
from typing import List
class Codec:
    def __init__(self):
        self.res = []

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        
        self.traverse(root)
        return ','.join([str(x) for x in self.res])
        
    def traverse(self, root):
        if not root:
            self.res.append(-1111)
            return
        
        self.traverse(root.left)
        self.traverse(root.right)
        self.res.append(root.val)
   
        

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        if data == '':
            return None
        
        data = [int(ele) for ele in data.split(",")]
        return self.deserialize_pre(data)
        
    def deserialize_pre(self, data):
        if not data:
            return None
        val = data.pop(-1)
        # print(data)
        if val == -1111:
            return None
        root = TreeNode(val)
        
        root.right = self.deserialize_pre(data)
        root.left = self.deserialize_pre(data)
        return root
        

# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))
