# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:
        if not root:
            return None
        
        def getMin(node):
            while node.left:
                node = node.left
            return node
        
        if root.val == key:
            # 1.是叶子结点，直接删
            if not root.left and not root.right:
                return None
            # 2.是有一个子节点的，返回子节点
            elif not root.left:
                return root.right
            elif not root.right:
                return root.left
            # 3.有左子树和右子树，替代：左子树的最大 或右子树的最小
            else:
                minNode = getMin(root.right) # 找 右子树最小
                # root.val = minNode.val
                root.right = self.deleteNode(root.right, minNode.val) # 删除 右子树最小
                # 用右子树最小节点替换root
                minNode.left = root.left
                minNode.right = root.right
                root = minNode
        
        elif root.val> key:
            root.left = self.deleteNode(root.left, key)
        elif root.val< key:
            root.right = self.deleteNode(root.right, key)
        return root
        
